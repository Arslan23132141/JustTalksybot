from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.enums import ParseMode
import asyncio
import os
import json
from datetime import datetime, timedelta

from aiogram.client.default import DefaultBotProperties

BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –ë–î-—Ñ–∞–π–ª
DB_FILE = "users.json"
LIKE_LIMIT_PER_DAY = 200
LIKE_RESET_HOURS = 24

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ —Ñ–∞–π–ª–∞
if os.path.exists(DB_FILE):
    with open(DB_FILE, "r", encoding="utf-8") as f:
        users = json.load(f)
else:
    users = {}

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã –∏ –≤—Ö–æ–¥—è—â–∏—Ö –ª–∞–π–∫–æ–≤
temp_profiles = {}
pending_likes = {}

questions = ["name", "gender", "age", "city", "looking_for", "about", "media"]

@dp.message(Command("start"))
async def cmd_start(msg: Message):
    kb = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å")]], resize_keyboard=True)
    await msg.answer("üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Just Talksy ‚Äî –º–µ—Å—Ç–æ, –≥–¥–µ –Ω–∞—Ö–æ–¥—è—Ç –¥—Ä—É–∑–µ–π, —Ñ–ª–∏—Ä—Ç—É—é—Ç –∏ –ø—Ä–æ—Å—Ç–æ –≤–µ—Å–µ–ª–æ –ø—Ä–æ–≤–æ–¥—è—Ç –≤—Ä–µ–º—è üåº\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å üî•", reply_markup=kb)

@dp.message(F.text == "üöÄ –ù–∞—á–∞—Ç—å")
async def start_questionnaire(msg: Message):
    user_id = str(msg.from_user.id)
    temp_profiles[user_id] = {"step": 0}
    await msg.answer("üí¨ –í–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è:", reply_markup=ReplyKeyboardRemove())

@dp.message()
async def collect_profile(msg: Message):
    user_id = str(msg.from_user.id)
    now = datetime.now().isoformat()

    if user_id in users:
        if msg.text == "üîç –ù–∞–π—Ç–∏":
            await show_profile(msg)
            return
        elif msg.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É":
            temp_profiles[user_id] = {"step": 0}
            await msg.answer("üí¨ –í–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è:", reply_markup=ReplyKeyboardRemove())
            return
        elif msg.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
            await msg.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
            return

    if user_id not in temp_profiles:
        await msg.answer("–ù–∞–∂–º–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
        return

    profile = temp_profiles[user_id]
    step = profile["step"]

    if questions[step] == "name":
        profile["name"] = msg.text
        profile["step"] += 1
        kb = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–ü–∞—Ä–µ–Ω—å")], [KeyboardButton(text="–î–µ–≤—É—à–∫–∞")]], resize_keyboard=True)
        await msg.answer("üßë –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:", reply_markup=kb)

    elif questions[step] == "gender":
        if msg.text not in ["–ü–∞—Ä–µ–Ω—å", "–î–µ–≤—É—à–∫–∞"]:
            await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É: –ü–∞—Ä–µ–Ω—å –∏–ª–∏ –î–µ–≤—É—à–∫–∞")
            return
        profile["gender"] = msg.text
        profile["step"] += 1
        await msg.answer("üìÖ –£–∫–∞–∂–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:", reply_markup=ReplyKeyboardRemove())

    elif questions[step] == "age":
        if not msg.text.isdigit():
            await msg.answer("–í–≤–µ–¥–∏ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º")
            return
        profile["age"] = int(msg.text)
        profile["step"] += 1
        await msg.answer("üìç –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥:")

    elif questions[step] == "city":
        profile["city"] = msg.text.strip().lower()
        profile["step"] += 1
        kb = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–ü–∞—Ä–Ω—è")], [KeyboardButton(text="–î–µ–≤—É—à–∫—É")], [KeyboardButton(text="–î—Ä—É–∑–µ–π")]], resize_keyboard=True)
        await msg.answer("üëÄ –ö–æ–≥–æ —Ç—ã –∏—â–µ—à—å?", reply_markup=kb)

    elif questions[step] == "looking_for":
        if msg.text not in ["–ü–∞—Ä–Ω—è", "–î–µ–≤—É—à–∫—É", "–î—Ä—É–∑–µ–π"]:
            await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç")
            return
        profile["looking_for"] = msg.text
        profile["step"] += 1
        await msg.answer("‚úçÔ∏è –ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ –æ —Å–µ–±–µ:", reply_markup=ReplyKeyboardRemove())

    elif questions[step] == "about":
        profile["about"] = msg.text
        profile["step"] += 1
        await msg.answer("üì∏ –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –ø—Ä–æ—Ñ–∏–ª—è")

    elif questions[step] == "media":
        if not msg.photo and not msg.video:
            await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ")
            return
        profile["media"] = msg.photo[-1].file_id if msg.photo else msg.video.file_id

        users[user_id] = {
            "name": profile["name"],
            "gender": profile["gender"],
            "age": profile["age"],
            "city": profile["city"],
            "looking_for": profile["looking_for"],
            "about": profile["about"],
            "media": profile["media"],
            "username": msg.from_user.username,
            "shown": [],
            "likes": [],
            "skips": {},
            "like_times": [],
            "last_active": now
        }
        del temp_profiles[user_id]
        save_db()

        kb = ReplyKeyboardMarkup(keyboard=[
            [KeyboardButton(text="üîç –ù–∞–π—Ç–∏")],
            [KeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É")],
            [KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
        ], resize_keyboard=True)

        await msg.answer("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –≥–æ—Ç–æ–≤–∞!", reply_markup=kb)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ –∂–¥–∞–ª –æ—Ç–≤–µ—Ç
        if user_id in pending_likes:
            for liker_id in pending_likes[user_id]:
                gender = "–ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è" if users[liker_id]["gender"] == "–ü–∞—Ä–µ–Ω—å" else "–ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å"
                kb = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚ù§Ô∏è –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"matchlike_{liker_id}"),
                     InlineKeyboardButton(text="üëé –û—Ç–∫–∞–∑", callback_data="match_no")]
                ])
                await bot.send_message(chat_id=user_id, text=f"üíå –ü–æ—Ö–æ–∂–µ, —Ç—ã –∫–æ–º—É-—Ç–æ {gender}!", reply_markup=kb)
            del pending_likes[user_id]

async def show_profile(msg: Message):
    user_id = str(msg.from_user.id)
    now = datetime.now()

    def clean_old_profiles():
        to_delete = []
        for uid, u in users.items():
            last = datetime.fromisoformat(u.get("last_active", now.isoformat()))
            if (now - last).days >= 30:
                to_delete.append(uid)
        for uid in to_delete:
            users.pop(uid)
        if to_delete:
            save_db()

    clean_old_profiles()

    current_user = users[user_id]

    times = [datetime.fromisoformat(t) for t in current_user.get("like_times", [])]
    times = [t for t in times if (now - t).total_seconds() < LIKE_RESET_HOURS * 3600]
    if len(times) >= LIKE_LIMIT_PER_DAY:
        await msg.answer("–¢—ã –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞ –ª–∞–π–∫–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (200). –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        return

    for uid, u in users.items():
        if uid == user_id:
            continue
        if u["city"] != current_user["city"]:
            continue
        if abs(u["age"] - current_user["age"]) > 3:
            continue
        if uid in current_user["shown"]:
            last = current_user["skips"].get(uid)
            if last and (now - datetime.fromisoformat(last)).days < 1:
                continue

        current_user["shown"].append(uid)
        save_db()

        media_type = "photo" if u["media"].startswith("AgAC") else "video"
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ù§Ô∏è", callback_data=f"like_{uid}"),
             InlineKeyboardButton(text="üëé", callback_data=f"skip_{uid}")]
        ])

        caption = f"<b>{u['name']}, {u['age']}</b>\n{u['about']}\nüëÄ –ò—â–µ—Ç: {u['looking_for']}"

        if media_type == "photo":
            await msg.answer_photo(photo=u["media"], caption=caption, reply_markup=markup)
        else:
            await msg.answer_video(video=u["media"], caption=caption, reply_markup=markup)
        return

    await msg.answer("–ê–Ω–∫–µ—Ç –±–æ–ª—å—à–µ –Ω–µ—Ç üòî")

@dp.callback_query()
async def handle_callback(callback: types.CallbackQuery):
    user_id = str(callback.from_user.id)
    data = callback.data
    current_user = users[user_id]
    now = datetime.now().isoformat()

    if data.startswith("like_"):
        liked_id = data.split("_")[1]
        current_user["likes"].append(liked_id)
        current_user["like_times"].append(now)
        save_db()

        if user_id in users[liked_id]["likes"]:
            gender = "–ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è" if current_user["gender"] == "–ü–∞—Ä–µ–Ω—å" else "–ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å"
            username = callback.from_user.username
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ù§Ô∏è –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"matchlike_{user_id}"),
                 InlineKeyboardButton(text="üëé –û—Ç–∫–∞–∑", callback_data="match_no")]
            ])
            await bot.send_message(chat_id=liked_id, text=f"üíå –ü–æ—Ö–æ–∂–µ, —Ç—ã –∫–æ–º—É-—Ç–æ {gender}!", reply_markup=kb)
        else:
            pending_likes.setdefault(liked_id, []).append(user_id)

        await callback.message.edit_reply_markup(reply_markup=None)
        await show_profile(callback.message)

    elif data.startswith("skip_"):
        skipped_id = data.split("_")[1]
        current_user["skips"][skipped_id] = now
        save_db()
        await callback.message.edit_reply_markup(reply_markup=None)
        await show_profile(callback.message)

    elif data.startswith("matchlike_"):
        liked_user_id = data.split("_")[1]
        liked_user = users.get(liked_user_id)
        if liked_user and liked_user.get("username"):
            url = f"https://t.me/{liked_user['username']}"
            media_type = "photo" if liked_user['media'].startswith("AgAC") else "video"
            caption = f"üéâ –£ –≤–∞—Å –≤–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è!\nüëâ @{liked_user['username']}\n<b>{liked_user['name']}, {liked_user['age']}</b>\n{liked_user['about']}"
            if media_type == "photo":
                await bot.send_photo(chat_id=user_id, photo=liked_user['media'], caption=caption)
            else:
                await bot.send_video(chat_id=user_id, video=liked_user['media'], caption=caption)

    await callback.answer()

def save_db():
    with open(DB_FILE, "w", encoding="utf-8") as f:
        json.dump(users, f, ensure_ascii=False, indent=2)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

