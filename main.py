from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.enums import ParseMode
import asyncio
import logging
from datetime import datetime

from db import get_user, save_user, get_matching_profiles, update_user_like

logging.basicConfig(level=logging.INFO)
BOT_TOKEN = "–¢–û–ö–ï–ù_–¢–í–û–ï–ì–û_–ë–û–¢–ê"
bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

LIKE_LIMIT_PER_DAY = 200
LIKE_RESET_HOURS = 24

temp_profiles = {}
pending_likes = {}
user_likes = {}

questions = ["name", "gender", "age", "city", "looking_for", "about", "media"]

@dp.message(Command("start"))
async def cmd_start(msg: Message):
    kb = ReplyKeyboardMarkup([[KeyboardButton("üöÄ –ù–∞—á–∞—Ç—å")]], resize_keyboard=True)
    await msg.answer("üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Just Talksy! –ñ–º–∏ üöÄ –ù–∞—á–∞—Ç—å, —á—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É.", reply_markup=kb)

@dp.message(F.text == "üöÄ –ù–∞—á–∞—Ç—å")
async def start_questionnaire(msg: Message):
    user_id = msg.from_user.id
    temp_profiles[user_id] = {"step": 0}
    await msg.answer("üí¨ –í–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è:", reply_markup=ReplyKeyboardRemove())

@dp.message()
async def collect_profile(msg: Message):
    user_id = msg.from_user.id
    now = datetime.utcnow()

    user = await get_user(user_id)
    if user and msg.text == "üîç –ù–∞–π—Ç–∏":
        return await show_profile(msg)

    if user and msg.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É":
        temp_profiles[user_id] = {"step": 0}
        return await msg.answer("üí¨ –í–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è:", reply_markup=ReplyKeyboardRemove())

    if user and msg.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        return await msg.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")

    if user_id not in temp_profiles:
        return await msg.answer("–ù–∞–∂–º–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")

    profile = temp_profiles[user_id]
    step = profile["step"]

    if questions[step] == "name":
        profile["name"] = msg.text
        profile["step"] += 1
        return await msg.answer("–£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª (–ü–∞—Ä–µ–Ω—å/–î–µ–≤—É—à–∫–∞):")

    elif questions[step] == "gender":
        profile["gender"] = msg.text
        profile["step"] += 1
        return await msg.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")

    elif questions[step] == "age":
        if not msg.text.isdigit():
            return await msg.answer("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:")
        profile["age"] = int(msg.text)
        profile["step"] += 1
        return await msg.answer("–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞?")

    elif questions[step] == "city":
        profile["city"] = msg.text
        profile["step"] += 1
        return await msg.answer("–ö–æ–≥–æ —Ç—ã –∏—â–µ—à—å? (–ü–∞—Ä–Ω—è/–î–µ–≤—É—à–∫—É):")

    elif questions[step] == "looking_for":
        profile["target_gender"] = msg.text
        profile["step"] += 1
        return await msg.answer("–ù–∞–ø–∏—à–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ:")

    elif questions[step] == "about":
        profile["description"] = msg.text
        profile["step"] += 1
        return await msg.answer("–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é:")

    elif questions[step] == "media":
        if not msg.photo:
            return await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ.")

        profile["photo_id"] = msg.photo[-1].file_id
        profile["user_id"] = user_id
        profile["username"] = msg.from_user.username
        profile["last_active"] = now

        await save_user(profile)
        del temp_profiles[user_id]

        kb = ReplyKeyboardMarkup([
            [KeyboardButton("üîç –ù–∞–π—Ç–∏")],
            [KeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É")],
            [KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
        ], resize_keyboard=True)

        await msg.answer("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –≥–æ—Ç–æ–≤–∞!", reply_markup=kb)

        if user_id in pending_likes:
            for liker_id in pending_likes[user_id]:
                gender = ("–ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è" if profile["gender"] == "–ü–∞—Ä–µ–Ω—å" else "–ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å")
                kb2 = InlineKeyboardMarkup([
                    [
                        InlineKeyboardButton("‚ù§Ô∏è –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"matchlike_{liker_id}"),
                        InlineKeyboardButton("üëé –û—Ç–∫–∞–∑", callback_data="match_no")
                    ]])
                await bot.send_message(user_id, f"üíå –ü–æ—Ö–æ–∂–µ, —Ç—ã –∫–æ–º—É-—Ç–æ {gender}!", reply_markup=kb2)
            del pending_likes[user_id]

async def show_profile(msg: Message):
    user_id = msg.from_user.id
    current = await get_user(user_id)
    if not current:
        return await msg.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏ –∞–Ω–∫–µ—Ç—É —Å –ø–æ–º–æ—â—å—é /start")

    candidates = await get_matching_profiles(current)
    if not candidates:
        return await msg.answer("–ê–Ω–∫–µ—Ç –±–æ–ª—å—à–µ –Ω–µ—Ç üòî")

    u = candidates[0]
    text = f"<b>{u['name']}, {u['age']}</b>\n–ì–æ—Ä–æ–¥: {u['city']}\n–û —Å–µ–±–µ: {u['description']}"
    kb = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚ù§Ô∏è", callback_data=f"like_{u['user_id']}"),
            InlineKeyboardButton("üëé", callback_data=f"skip_{u['user_id']}")
        ]])
    await msg.answer_photo(photo=u["photo_id"], caption=text, reply_markup=kb)

@dp.callback_query()
async def handle_callback(callback: types.CallbackQuery):
    data = callback.data
    from_id = callback.from_user.id

    if data.startswith("like_"):
        to_id = int(data.split("_")[1])
        await update_user_like(from_id, to_id, liked=True)
        other_user = await get_user(to_id)
        if other_user:
            if other_user.get("likes") and from_id in other_user["likes"]:
                kb = InlineKeyboardMarkup([
                    [
                        InlineKeyboardButton("‚ù§Ô∏è –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"matchlike_{from_id}"),
                        InlineKeyboardButton("üëé –û—Ç–∫–∞–∑", callback_data="match_no")
                    ]])
                await bot.send_message(to_id, "üíå –ü–æ—Ö–æ–∂–µ, —Ç—ã –∫–æ–º—É-—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è(–∞—Å—å)!", reply_markup=kb)
        await callback.message.edit_reply_markup()
        await callback.answer("–õ–∞–π–∫!")

    elif data.startswith("skip_"):
        to_id = int(data.split("_")[1])
        await update_user_like(from_id, to_id, liked=False)
        await callback.message.edit_reply_markup()
        await callback.answer("–ü—Ä–æ–ø—É—â–µ–Ω–æ")

    elif data.startswith("matchlike_"):
        liker_id = int(data.split("_")[1])
        liker = await get_user(liker_id)
        current = await get_user(callback.from_user.id)

        liker_link = f"@{liker['username']}" if liker.get("username") else f"<code>{liker_id}</code>"
        current_link = f"@{current['username']}" if current.get("username") else f"<code>{callback.from_user.id}</code>"

        await bot.send_message(liker_id, f"üéâ –£ –≤–∞—Å –Ω–æ–≤–∞—è –ø–∞—Ä–∞!\n–¢—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å: {current_link}")
        await bot.send_message(callback.from_user.id, f"üéâ –ü–∞—Ä–∞ –ø—Ä–∏–Ω—è—Ç–∞!\n–¢—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å: {liker_link}")
        await callback.message.delete()

    elif data == "match_no":
        await callback.message.delete()

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
