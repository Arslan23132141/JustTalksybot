from aiogram.enums import ParseMode
import asyncio
import os
import json
import logging
from datetime import datetime, timedelta
from datetime import datetime

from aiogram.client.default import DefaultBotProperties
from db import get_user, save_user, get_matching_profiles, update_user_like

logging.basicConfig(level=logging.INFO)

BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# –ë–î-—Ñ–∞–π–ª
DB_FILE = "data/users.json"
LIKE_LIMIT_PER_DAY = 200
LIKE_RESET_HOURS = 24
# –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ —Ñ–∞–π–ª–∞ + —Å–æ–∑–¥–∞–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ—Ç
os.makedirs("data", exist_ok=True)  # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –ø–∞–ø–∫–∞ data –µ—Å—Ç—å

if not os.path.exists(DB_FILE):
    with open(DB_FILE, "w", encoding="utf-8") as f:
        json.dump({}, f, ensure_ascii=False, indent=2)

try:
    with open(DB_FILE, "r", encoding="utf-8") as f:
        users = json.load(f)
except (json.JSONDecodeError, FileNotFoundError):
    users = {}

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã –∏ –≤—Ö–æ–¥—è—â–∏—Ö –ª–∞–π–∫–æ–≤
temp_profiles = {}
pending_likes = {}
user_likes = {}

questions = ["name", "gender", "age", "city", "looking_for", "about", "media"]

@dp.message(Command("start"))
async def cmd_start(msg: Message):
    kb = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å")]], resize_keyboard=True)
    await msg.answer("üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Just Talksy ‚Äî –º–µ—Å—Ç–æ, –≥–¥–µ –Ω–∞—Ö–æ–¥—è—Ç –¥—Ä—É–∑–µ–π, —Ñ–ª–∏—Ä—Ç—É—é—Ç –∏ –ø—Ä–æ—Å—Ç–æ –≤–µ—Å–µ–ª–æ –ø—Ä–æ–≤–æ–¥—è—Ç –≤—Ä–µ–º—è üåº\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å üî•", reply_markup=kb)
    kb = ReplyKeyboardMarkup([[KeyboardButton("üöÄ –ù–∞—á–∞—Ç—å")]], resize_keyboard=True)
    await msg.answer("üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Just Talksy! –ñ–º–∏ üöÄ –ù–∞—á–∞—Ç—å, —á—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É.", reply_markup=kb)

@dp.message(F.text == "üöÄ –ù–∞—á–∞—Ç—å")
async def start_questionnaire(msg: Message):
    user_id = str(msg.from_user.id)
    user_id = msg.from_user.id
    temp_profiles[user_id] = {"step": 0}
    await msg.answer("üí¨ –í–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è:", reply_markup=ReplyKeyboardRemove())

@dp.message()
async def collect_profile(msg: Message):
    user_id = str(msg.from_user.id)
    now = datetime.now().isoformat()

    if user_id in users:
        if msg.text == "üîç –ù–∞–π—Ç–∏":
            await show_profile(msg)
            return
        elif msg.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É":
            temp_profiles[user_id] = {"step": 0}
            await msg.answer("üí¨ –í–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è:", reply_markup=ReplyKeyboardRemove())
            return
        elif msg.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
            await msg.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
            return
    user_id = msg.from_user.id
    now = datetime.utcnow()

    user = await get_user(user_id)
    if user and msg.text == "üîç –ù–∞–π—Ç–∏":
        return await show_profile(msg)

    if user and msg.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É":
        temp_profiles[user_id] = {"step": 0}
        return await msg.answer("üí¨ –í–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è:", reply_markup=ReplyKeyboardRemove())

    if user and msg.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        return await msg.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")

    if user_id not in temp_profiles:
        await msg.answer("–ù–∞–∂–º–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
        return
        return await msg.answer("–ù–∞–∂–º–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")

    profile = temp_profiles[user_id]
    step = profile["step"]

    if questions[step] == "name":
        profile["name"] = msg.text
        profile["step"] += 1
        kb = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–ü–∞—Ä–µ–Ω—å")], [KeyboardButton(text="–î–µ–≤—É—à–∫–∞")]], resize_keyboard=True)
        await msg.answer("üßë –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:", reply_markup=kb)
        return await msg.answer("–£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª (–ü–∞—Ä–µ–Ω—å/–î–µ–≤—É—à–∫–∞):")

    elif questions[step] == "gender":
        if msg.text not in ["–ü–∞—Ä–µ–Ω—å", "–î–µ–≤—É—à–∫–∞"]:
            await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É: –ü–∞—Ä–µ–Ω—å –∏–ª–∏ –î–µ–≤—É—à–∫–∞")
            return
        profile["gender"] = msg.text
        profile["step"] += 1
        await msg.answer("üìÖ –£–∫–∞–∂–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:", reply_markup=ReplyKeyboardRemove())
        return await msg.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")

    elif questions[step] == "age":
        if not msg.text.isdigit():
            await msg.answer("–í–≤–µ–¥–∏ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º")
            return
            return await msg.answer("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:")
        profile["age"] = int(msg.text)
        profile["step"] += 1
        await msg.answer("üìç –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥:")
        return await msg.answer("–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞?")

    elif questions[step] == "city":
        profile["city"] = msg.text.strip().lower()
        profile["city"] = msg.text
        profile["step"] += 1
        kb = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–ü–∞—Ä–Ω—è")], [KeyboardButton(text="–î–µ–≤—É—à–∫—É")], [KeyboardButton(text="–î—Ä—É–∑–µ–π")]], resize_keyboard=True)
        await msg.answer("üëÄ –ö–æ–≥–æ —Ç—ã –∏—â–µ—à—å?", reply_markup=kb)
        return await msg.answer("–ö–æ–≥–æ —Ç—ã –∏—â–µ—à—å? (–ü–∞—Ä–Ω—è/–î–µ–≤—É—à–∫—É):")

    elif questions[step] == "looking_for":
        if msg.text not in ["–ü–∞—Ä–Ω—è", "–î–µ–≤—É—à–∫—É", "–î—Ä—É–∑–µ–π"]:
            await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç")
            return
        profile["looking_for"] = msg.text
        profile["target_gender"] = msg.text
        profile["step"] += 1
        await msg.answer("‚úçÔ∏è –ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ –æ —Å–µ–±–µ:", reply_markup=ReplyKeyboardRemove())
        return await msg.answer("–ù–∞–ø–∏—à–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ:")

    elif questions[step] == "about":
        profile["about"] = msg.text
        profile["description"] = msg.text
        profile["step"] += 1
        await msg.answer("üì∏ –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –ø—Ä–æ—Ñ–∏–ª—è")
        return await msg.answer("–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é:")

    elif questions[step] == "media":
        if not msg.photo and not msg.video:
            await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ")
            return
        profile["media"] = msg.photo[-1].file_id if msg.photo else msg.video.file_id
        profile["media_type"] = "photo" if msg.photo else "video"

        users[user_id] = {
            "name": profile["name"],
            "gender": profile["gender"],
            "age": profile["age"],
            "city": profile["city"],
            "looking_for": profile["looking_for"],
            "about": profile["about"],
            "media": profile["media"],
            "media_type": profile["media_type"],
            "username": msg.from_user.username,
            "shown": [],
            "likes": [],
            "skips": {},
            "like_times": [],
            "last_active": now
        }
        if not msg.photo:
            return await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ.")

        profile["photo_id"] = msg.photo[-1].file_id
        profile["user_id"] = user_id
        profile["username"] = msg.from_user.username
        profile["last_active"] = now

        await save_user(profile)
        del temp_profiles[user_id]
        save_db()

        kb = ReplyKeyboardMarkup(keyboard=[
            [KeyboardButton(text="üîç –ù–∞–π—Ç–∏")],
            [KeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É")],
            [KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
        kb = ReplyKeyboardMarkup([
            [KeyboardButton("üîç –ù–∞–π—Ç–∏")],
            [KeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É")],
            [KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
        ], resize_keyboard=True)

        await msg.answer("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –≥–æ—Ç–æ–≤–∞!", reply_markup=kb)

        if user_id in pending_likes:
            for liker_id in pending_likes[user_id]:
                gender = "–ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è" if users[liker_id]["gender"] == "–ü–∞—Ä–µ–Ω—å" else "–ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å"
                kb = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚ù§Ô∏è –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"matchlike_{liker_id}"),
                     InlineKeyboardButton(text="üëé –û—Ç–∫–∞–∑", callback_data="match_no")]
                ])
                await bot.send_message(chat_id=user_id, text=f"üíå –ü–æ—Ö–æ–∂–µ, —Ç—ã –∫–æ–º—É-—Ç–æ {gender}!", reply_markup=kb)
                gender = ("–ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è" if profile["gender"] == "–ü–∞—Ä–µ–Ω—å" else "–ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å")
                kb2 = InlineKeyboardMarkup([
                    [
                        InlineKeyboardButton("‚ù§Ô∏è –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"matchlike_{liker_id}"),
                        InlineKeyboardButton("üëé –û—Ç–∫–∞–∑", callback_data="match_no")
                    ]])
                await bot.send_message(user_id, f"üíå –ü–æ—Ö–æ–∂–µ, —Ç—ã –∫–æ–º—É-—Ç–æ {gender}!", reply_markup=kb2)
            del pending_likes[user_id]

async def show_profile(msg: Message):
    user_id = str(msg.from_user.id)
    now = datetime.now()

    if user_id not in users:
        await msg.answer("‚ùå –ó–∞–ø–æ–ª–Ω–∏ –∞–Ω–∫–µ—Ç—É —Å–Ω–∞—á–∞–ª–∞ —Å –ø–æ–º–æ—â—å—é /start")
        return

    def clean_old_profiles():
        to_delete = []
        for uid, u in users.items():
            last = datetime.fromisoformat(u.get("last_active", now.isoformat()))
            if (now - last).days >= 30:
                to_delete.append(uid)
        for uid in to_delete:
            users.pop(uid)
        for u in users.values():
            u["shown"] = [sid for sid in u["shown"] if sid in users]
        if to_delete:
            save_db()

    clean_old_profiles()

    current_user = users[user_id]

    times = [datetime.fromisoformat(t) for t in current_user.get("like_times", [])]
    times = [t for t in times if (now - t).total_seconds() < LIKE_RESET_HOURS * 3600]
    current_user["like_times"] = [t.isoformat() for t in times]  # –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö
    if len(times) >= LIKE_LIMIT_PER_DAY:
        await msg.answer("–¢—ã –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞ –ª–∞–π–∫–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (200). –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        return

    for uid, u in users.items():
        if uid == user_id:
            continue
        if u["city"] != current_user["city"]:
            continue
        if abs(u["age"] - current_user["age"]) > 3:
            continue
        if uid in current_user["shown"]:
            last = current_user["skips"].get(uid)
            if last and (now - datetime.fromisoformat(last)).days < 1:
                continue

        current_user["shown"].append(uid)
        save_db()

        media_type = u.get("media_type", "photo")
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ù§Ô∏è", callback_data=f"like_{uid}"),
             InlineKeyboardButton(text="üëé", callback_data=f"skip_{uid}")]
        ])

        caption = f"<b>{u['name']}, {u['age']}</b>\n{u['about']}\nüëÄ –ò—â–µ—Ç: {u['looking_for']}"

        if media_type == "photo":
            await msg.answer_photo(photo=u["media"], caption=caption, reply_markup=markup)
        else:
            await msg.answer_video(video=u["media"], caption=caption, reply_markup=markup)
        return

    await msg.answer("–ê–Ω–∫–µ—Ç –±–æ–ª—å—à–µ –Ω–µ—Ç üòî")
    user_id = msg.from_user.id
    current = await get_user(user_id)
    if not current:
        return await msg.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏ –∞–Ω–∫–µ—Ç—É —Å –ø–æ–º–æ—â—å—é /start")

    candidates = await get_matching_profiles(current)
    if not candidates:
        return await msg.answer("–ê–Ω–∫–µ—Ç –±–æ–ª—å—à–µ –Ω–µ—Ç üòî")

    u = candidates[0]
    text = f"<b>{u['name']}, {u['age']}</b>\n–ì–æ—Ä–æ–¥: {u['city']}\n–û —Å–µ–±–µ: {u['description']}"
    kb = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚ù§Ô∏è", callback_data=f"like_{u['user_id']}"),
            InlineKeyboardButton("üëé", callback_data=f"skip_{u['user_id']}")
        ]])
    await msg.answer_photo(photo=u["photo_id"], caption=text, reply_markup=kb)

@dp.callback_query()
async def handle_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    data = callback.data

    if user_id not in users:
        await callback.message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏ –∞–Ω–∫–µ—Ç—É.")
        await callback.answer()
        return

    current_user = users[user_id]
    now = datetime.now().isoformat()
    from_id = callback.from_user.id

    if data.startswith("like_"):
        liked_id = data.split("_")[1]
        if liked_id not in current_user["likes"]:
            current_user["likes"].append(liked_id)
        current_user["like_times"].append(now)
        current_user["like_times"] = [
            t for t in current_user["like_times"]
            if (datetime.now() - datetime.fromisoformat(t)).total_seconds() < LIKE_RESET_HOURS * 3600
        ]
        save_db()

        if liked_id in users and user_id in users[liked_id]["likes"]:
            gender = "–ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è" if current_user["gender"] == "–ü–∞—Ä–µ–Ω—å" else "–ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å"
            if users[liked_id].get("username"):
                kb = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚ù§Ô∏è –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"matchlike_{user_id}"),
                     InlineKeyboardButton(text="üëé –û—Ç–∫–∞–∑", callback_data="match_no")]
                ])
                await bot.send_message(chat_id=liked_id, text=f"üíå –ü–æ—Ö–æ–∂–µ, —Ç—ã –∫–æ–º—É-—Ç–æ {gender}!", reply_markup=kb)
        else:
            pending_likes.setdefault(liked_id, []).append(user_id)

        await callback.message.edit_reply_markup(reply_markup=None)
        await asyncio.sleep(0.2)
        await show_profile(callback.message)
        to_id = int(data.split("_")[1])
        await update_user_like(from_id, to_id, liked=True)
        other_user = await get_user(to_id)
        if other_user:
            if other_user.get("likes") and from_id in other_user["likes"]:
                kb = InlineKeyboardMarkup([
                    [
                        InlineKeyboardButton("‚ù§Ô∏è –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"matchlike_{from_id}"),
                        InlineKeyboardButton("üëé –û—Ç–∫–∞–∑", callback_data="match_no")
                    ]])
                await bot.send_message(to_id, "üíå –ü–æ—Ö–æ–∂–µ, —Ç—ã –∫–æ–º—É-—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è(–∞—Å—å)!", reply_markup=kb)
        await callback.message.edit_reply_markup()
        await callback.answer("–õ–∞–π–∫!")

    elif data.startswith("skip_"):
        skipped_id = data.split("_")[1]
        current_user["skips"][skipped_id] = now
        save_db()
        await callback.message.edit_reply_markup(reply_markup=None)
        await asyncio.sleep(0.2)
        await show_profile(callback.message)
        to_id = int(data.split("_")[1])
        await update_user_like(from_id, to_id, liked=False)
        await callback.message.edit_reply_markup()
        await callback.answer("–ü—Ä–æ–ø—É—â–µ–Ω–æ")

    elif data.startswith("matchlike_"):
        liked_user_id = data.split("_")[1]
        liked_user = users.get(liked_user_id)
        if liked_user:
            if liked_user.get("username"):
                media_type = liked_user.get("media_type", "photo")
                caption = f"üéâ –£ –≤–∞—Å –≤–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è!\nüëâ @{liked_user['username']}\n<b>{liked_user['name']}, {liked_user['age']}</b>\n{liked_user['about']}"
                if media_type == "photo":
                    await bot.send_photo(chat_id=user_id, photo=liked_user['media'], caption=caption)
                else:
                    await bot.send_video(chat_id=user_id, video=liked_user['media'], caption=caption)
            else:
                await bot.send_message(chat_id=user_id, text="üéâ –£ –≤–∞—Å –≤–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è! –ù–æ —É —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç username üòî")
        liker_id = int(data.split("_")[1])
        liker = await get_user(liker_id)
        current = await get_user(callback.from_user.id)

    elif data == "match_no":
        await callback.answer("–û—Ç–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        liker_link = f"@{liker['username']}" if liker.get("username") else f"<code>{liker_id}</code>"
        current_link = f"@{current['username']}" if current.get("username") else f"<code>{callback.from_user.id}</code>"

        await bot.send_message(liker_id, f"üéâ –£ –≤–∞—Å –Ω–æ–≤–∞—è –ø–∞—Ä–∞!\n–¢—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å: {current_link}")
        await bot.send_message(callback.from_user.id, f"üéâ –ü–∞—Ä–∞ –ø—Ä–∏–Ω—è—Ç–∞!\n–¢—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å: {liker_link}")
        await callback.message.delete()

    await callback.answer()
    elif data == "match_no":
        await callback.message.delete()

def save_db():
    os.makedirs("data", exist_ok=True)
    with open(DB_FILE, "w", encoding="utf-8") as f:
        json.dump(users, f, ensure_ascii=False, indent=2)
    logging.info(f"DB saved with {len(users)} users.")
    
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
